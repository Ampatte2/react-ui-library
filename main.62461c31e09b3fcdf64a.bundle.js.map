{"version":3,"file":"main.62461c31e09b3fcdf64a.bundle.js","sources":["webpack:///./src/components/_helpers/Util.js"],"sourcesContent":["const IGNORE = ['children'];\r\n\r\n/**\r\n * Extracts props for provided layout\r\n * @param {Object} layout - The Layout Proptypes that you are extracting for\r\n * @param {Object} props - The props of the component\r\n * @param {Object} def - Default values for attributes\r\n * @param {Boolean|String[]} retain - Fields to keep in props, bool for all and array for selective\r\n * @returns {Object[]} [Props for layout, Props with layout props removed (or kept depending on params)]\r\n */\r\nexport const ExtractProps = (layout, props, def = {}, retain = false) => {\r\n    const filter = Object.keys(layout);\r\n    const type = typeof(retain);\r\n    const res = [{}, {}];\r\n\r\n    Object.entries(props).forEach(([key, value]) => {\r\n        \r\n        // If a layout prop\r\n        if (filter.indexOf(key) > -1 && IGNORE.indexOf(key) === -1) {\r\n            const val = value || def;\r\n            res[0][key] = val;\r\n\r\n            // If config tells us to keep it in original\r\n            if (retain || (type === 'object' && retain.indexOf(key) > -1)) {\r\n                res[1][key] = val;\r\n            }\r\n        \r\n        // If not layout param\r\n        } else {\r\n            res[1][key] = value;\r\n        }\r\n    });\r\n\r\n    return res;\r\n}"],"mappings":"AAAA","sourceRoot":""}